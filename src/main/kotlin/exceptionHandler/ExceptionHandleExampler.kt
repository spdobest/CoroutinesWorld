package exceptionHandlerimport kotlinx.coroutines.*import java.lang.ArithmeticExceptionimport java.lang.IndexOutOfBoundsExceptionfun main() {    runBlocking {        val myHandler : CoroutineExceptionHandler = CoroutineExceptionHandler { coroutineContext, throwable ->            println("Exception Handled: ${throwable.localizedMessage}")        }        val job = GlobalScope.launch(myHandler) {            println("Throwing exception from Job")            throw IndexOutOfBoundsException("Exception in Coroutine")        }        job.join()        val deferred = GlobalScope.async {            println("Throwing exception from Async")            throw ArithmeticException("Exception from Async")        }        try{            deferred.await()        }catch (e:ArithmeticException){            println("Caught arithmetic exception ${e.localizedMessage}")        }    }}