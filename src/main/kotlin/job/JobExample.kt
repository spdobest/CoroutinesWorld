package jobimport kotlinx.coroutines.delayimport kotlinx.coroutines.launchimport kotlinx.coroutines.runBlocking/** * In the below code * Job1 is the parent of job 2 and job3 * when we cancel job1, automatically job2 and job 3 will be also cancelled * so the output is like this * * Job1 launchedJob2 launchedJob3 launchedJob1 will be cancelledJob2 completedJob3 completedJob1 completed We are not getting job2 finishing and job3 finishing in output because job2 and job 3 cancelled after cancelling job1 */fun main() {    runBlocking {        val job1 = launch {           // delay(3000L)            println("Job1 launched")            val job2 = launch {                println("Job2 launched")                delay(3000L)                println("Job2 is finishing")            }            job2.invokeOnCompletion {                println("Job2 completed")            }            val job3 = launch {                println("Job3 launched")                delay(3000L)                println("Job3 is finishing")            }            job3.invokeOnCompletion {                println("Job3 completed")            }        }        job1.invokeOnCompletion {            println("Job1 completed")        }        delay(500L)        println("Job1 will be cancelled")        job1.cancel()    }}